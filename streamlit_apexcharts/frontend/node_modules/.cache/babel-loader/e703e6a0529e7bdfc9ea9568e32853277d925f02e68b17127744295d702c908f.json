{"ast":null,"code":"var _jsxFileName = \"/home/kobe/component-template/template/my_component/frontend/src/CharTest.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { Streamlit } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventCallback(event, chartContext, config) {\n  Streamlit.setComponentValue(config.selectedDataPoints);\n}\n_c = EventCallback;\nfunction App(props) {\n  _s();\n  // var config = props.chart_dict \n\n  // Declare a new state variable, which we'll call \"count\"\n  // const [chartDict, setChartDict] = useState( props.chart_dict )\n\n  var events = options.chart.events;\n  var eventsReplace = {};\n  Object.keys(events).forEach(k => {\n    eventsReplace = {\n      ...eventsReplace,\n      [k]: (event, chartContext, config) => EventCallback(event, chartContext, config)\n    };\n  });\n  events = eventsReplace;\n  const [options, setOptions] = useState(props.chart_dict.options);\n  const [series, setSeries] = useState(props.chart_dict.series);\n  const [index, setIndex] = useState(props.chart_dict.index);\n\n  // useEffect( () => {\n\n  //     var events = options.chart.events \n\n  //     var eventsReplace = {}\n\n  //     Object.keys(events).forEach(( k : any  ) => {\n\n  //         eventsReplace = { ...eventsReplace , [k] :  (event :any , chartContext :any , config :any) =>   EventCallback(event   , chartContext  , config  )  }\n\n  //     }\n  //     )\n\n  //     events = eventsReplace\n\n  //     // options.chart.events = eventsReplace\n\n  //     // options.chart.type = \"line\"\n\n  //     setOptions({...options  })\n\n  //     console.log( \"effect :\",  options.chart.type)\n\n  // } , [] ) \n\n  // console.log(options.chart.type)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mixed-chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"                  \", options.chart.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: options,\n          series: series,\n          type: options.chart.type,\n          width: options.chart.width,\n          height: options.chart.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"H8SJ2UQxDFzDCSmpgF3KcgM1zwQ=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventCallback\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","Chart","Streamlit","jsxDEV","_jsxDEV","EventCallback","event","chartContext","config","setComponentValue","selectedDataPoints","_c","App","props","_s","events","options","chart","eventsReplace","Object","keys","forEach","k","setOptions","chart_dict","series","setSeries","index","setIndex","className","children","type","fileName","_jsxFileName","lineNumber","columnNumber","width","height","_c2","$RefreshReg$"],"sources":["/home/kobe/component-template/template/my_component/frontend/src/CharTest.tsx"],"sourcesContent":["\nimport React, { Component ,useState , useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport {\n    Streamlit,\n    StreamlitComponentBase,\n    withStreamlitConnection,\n  } from \"streamlit-component-lib\"\n\n\n  function EventCallback (event :any , chartContext :any , config :any ) {\n\n    Streamlit.setComponentValue(config.selectedDataPoints)\n\n  }\n\n\n\n\nfunction App(props:any) {\n\n    // var config = props.chart_dict \n\n    // Declare a new state variable, which we'll call \"count\"\n    // const [chartDict, setChartDict] = useState( props.chart_dict )\n\n    var events = options.chart.events \n\n    var eventsReplace = {}\n    \n    Object.keys(events).forEach(( k : any  ) => {\n    \n            eventsReplace = { ...eventsReplace , [k] :  (event :any , chartContext :any , config :any) =>   EventCallback(event   , chartContext  , config  )  }\n\n        }\n        )\n\n    events = eventsReplace\n\n    const [options, setOptions] = useState( props.chart_dict.options )\n    const [series, setSeries] = useState( props.chart_dict.series )\n    const [index, setIndex] = useState( props.chart_dict.index )\n\n\n    // useEffect( () => {\n\n    //     var events = options.chart.events \n\n    //     var eventsReplace = {}\n    \n    //     Object.keys(events).forEach(( k : any  ) => {\n    \n    //         eventsReplace = { ...eventsReplace , [k] :  (event :any , chartContext :any , config :any) =>   EventCallback(event   , chartContext  , config  )  }\n\n    //     }\n    //     )\n\n    //     events = eventsReplace\n\n    //     // options.chart.events = eventsReplace\n\n    //     // options.chart.type = \"line\"\n\n    //     setOptions({...options  })\n\n    //     console.log( \"effect :\",  options.chart.type)\n\n    // } , [] ) \n\n\n    // console.log(options.chart.type)\n\n\n    return (\n        <div className=\"app\">\n        <div className=\"row\">\n          <div className=\"mixed-chart\">\n\n            <div>                  {options.chart.type}</div>\n            <Chart\n              options={options}\n              series={series} \n              type= {options.chart.type}\n              width= {options.chart.width}\n              height= {options.chart.height}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n\n\nexport default App;"],"mappings":";;AACA,OAAOA,KAAK,IAAeC,QAAQ,QAAoB,OAAO;AAC9D,OAAOC,KAAK,MAAM,kBAAkB;AACpC,SACIC,SAAS,QAGJ,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGhC,SAASC,aAAaA,CAAEC,KAAU,EAAGC,YAAiB,EAAGC,MAAW,EAAG;EAErEN,SAAS,CAACO,iBAAiB,CAACD,MAAM,CAACE,kBAAkB,CAAC;AAExD;AAACC,EAAA,GAJQN,aAAa;AASxB,SAASO,GAAGA,CAACC,KAAS,EAAE;EAAAC,EAAA;EAEpB;;EAEA;EACA;;EAEA,IAAIC,MAAM,GAAGC,OAAO,CAACC,KAAK,CAACF,MAAM;EAEjC,IAAIG,aAAa,GAAG,CAAC,CAAC;EAEtBC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACM,OAAO,CAAGC,CAAO,IAAO;IAEpCJ,aAAa,GAAG;MAAE,GAAGA,aAAa;MAAG,CAACI,CAAC,GAAK,CAAChB,KAAU,EAAGC,YAAiB,EAAGC,MAAW,KAAOH,aAAa,CAACC,KAAK,EAAKC,YAAY,EAAIC,MAAQ;IAAG,CAAC;EAExJ,CACA,CAAC;EAELO,MAAM,GAAGG,aAAa;EAEtB,MAAM,CAACF,OAAO,EAAEO,UAAU,CAAC,GAAGvB,QAAQ,CAAEa,KAAK,CAACW,UAAU,CAACR,OAAQ,CAAC;EAClE,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAEa,KAAK,CAACW,UAAU,CAACC,MAAO,CAAC;EAC/D,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAEa,KAAK,CAACW,UAAU,CAACG,KAAM,CAAC;;EAG5D;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAGA;;EAGA,oBACIvB,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,eACpB1B,OAAA;MAAKyB,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClB1B,OAAA;QAAKyB,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAE1B1B,OAAA;UAAA0B,QAAA,GAAK,oBAAkB,EAACd,OAAO,CAACC,KAAK,CAACc,IAAI;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACjD/B,OAAA,CAACH,KAAK;UACJe,OAAO,EAAEA,OAAQ;UACjBS,MAAM,EAAEA,MAAO;UACfM,IAAI,EAAGf,OAAO,CAACC,KAAK,CAACc,IAAK;UAC1BK,KAAK,EAAGpB,OAAO,CAACC,KAAK,CAACmB,KAAM;UAC5BC,MAAM,EAAGrB,OAAO,CAACC,KAAK,CAACoB;QAAO;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACrB,EAAA,CAvEMF,GAAG;AAAA0B,GAAA,GAAH1B,GAAG;AA2EZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}