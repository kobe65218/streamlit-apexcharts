{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { Streamlit } from \"streamlit-component-lib\";\n\n// var t =  {\n\n//       dataPointMouseEnter : {type : 'mouseenter'  , return : [ 'seriesIndex'  ,  'dataPointIndex' ]  } ,  \n\n//       dataPointSelection : {type :  'mousedown' , return : ['seriesIndex' , 'dataPointIndex' ,  'selectedDataPoints']  }\n\n//  }\n\nfunction EventCallback(event, chartContext, config, eventType) {\n  // console.log(event)\n\n  // // console.log(chartContext)\n  // console.log(config)\n\n  // var eventType = event.type \n\n  Streamlit.setComponentValue({\n    [eventType]: {\n      dataPointIndex: config.dataPointIndex,\n      seriesIndex: config.seriesIndex,\n      selectedDataPoints: \"selectedDataPoints\" in config ? config[\"selectedDataPoints\"] : null\n    }\n  });\n\n  // if (eventType == \"mousedown\") {\n\n  //   var dataPoint =config.selectedDataPoints\n\n  //   var dataPointMap = dataPoint.map( (k :any   , i :any )=>    { \n\n  //     if ( k !== null ) {\n\n  //         // var dataPoindexList = dataPoint[i]\n\n  //         // dataPoindexList\n\n  //         return {\n  //             columns  : [index[\"columns\"][i]],  \n  //             index :  [index[\"index\"][dataPoint[i]]]\n  //         }\n\n  //     }\n\n  //   }  );\n\n  //   dataPointMap = dataPointMap.filter((k:any) => k!= null )\n\n  //   Streamlit.setComponentValue(dataPointMap)   \n\n  // } else {\n\n  //   var dataSeries =config.seriesIndex \n\n  //   var dataPoint = config.dataPointIndex\n\n  //   Streamlit.setComponentValue([ {columns : [index[\"columns\"][dataSeries] ] ,index : [index[\"index\"][dataPoint] ]}])  \n\n  // }\n}\n_c = EventCallback;\nfunction StreamlitCharts(props) {\n  _s();\n  const [options, setOptions] = useState(props.chart_dict.options);\n  const count = useRef(0);\n  useEffect(() => {\n    // console.log(\"effect\")\n\n    var newOptions = {\n      ...props.chart_dict.options\n    };\n    var eventsCopy = {\n      ...newOptions.chart.events\n    };\n    Object.keys(eventsCopy).forEach(k => {\n      eventsCopy[k] = eventsCopy[k] ? (event, chartContext, config) => {\n        EventCallback(event, chartContext, config, k);\n      } : null;\n    });\n    var ChangeFormater = newOptions;\n\n    // var ChangeFormater = {}\n\n    Object.keys(ChangeFormater).map((k, i) => {\n      if (k in {\n        xaxis: [],\n        yaxis: []\n      }) {\n        if (\"labels\" in ChangeFormater[k]) {\n          if (\"formatter\" in ChangeFormater[k][\"labels\"]) {\n            ChangeFormater[k][\"labels\"][\"formatter\"] = eval(ChangeFormater[k][\"labels\"][\"formatter\"]);\n\n            // console.log(\"change to funtion \")\n          }\n        }\n      }\n    });\n    newOptions = {\n      ...newOptions,\n      chart: {\n        ...props.chart_dict.options.chart,\n        events: eventsCopy\n      }\n    };\n    count.current += 1;\n    setOptions(newOptions);\n\n    // setCount(count + 1 )\n\n    // console.log(options)\n  }, [JSON.stringify(props.chart_dict.options)]);\n  if (count > 0) {}\n}\n_s(StreamlitCharts, \"my1EbHTphmOZ9CdNJ8kgthZwE9E=\");\n_c2 = StreamlitCharts;\nexport default StreamlitCharts;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventCallback\");\n$RefreshReg$(_c2, \"StreamlitCharts\");","map":{"version":3,"names":["useState","useEffect","useRef","Streamlit","EventCallback","event","chartContext","config","eventType","setComponentValue","dataPointIndex","seriesIndex","selectedDataPoints","_c","StreamlitCharts","props","_s","options","setOptions","chart_dict","count","newOptions","eventsCopy","chart","events","Object","keys","forEach","k","ChangeFormater","map","i","xaxis","yaxis","eval","current","JSON","stringify","_c2","$RefreshReg$"],"sources":["/home/kobe/Project/streamlit-apexcharts/streamlit_apexcharts/frontend/src/ChartStreamlit.tsx"],"sourcesContent":["\nimport React, { Component ,useState , useEffect , useRef, useCallback } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport {\n    Streamlit,\n  } from \"streamlit-component-lib\"\n\n// var t =  {\n\n//       dataPointMouseEnter : {type : 'mouseenter'  , return : [ 'seriesIndex'  ,  'dataPointIndex' ]  } ,  \n\n\n//       dataPointSelection : {type :  'mousedown' , return : ['seriesIndex' , 'dataPointIndex' ,  'selectedDataPoints']  }\n\n\n//  }\n\n\n\n  function EventCallback (event :any , chartContext :any , config :any , eventType :any  ) {\n\n    // console.log(event)\n\n    // // console.log(chartContext)\n    // console.log(config)\n\n      // var eventType = event.type \n\n      Streamlit.setComponentValue( { [eventType] :  {dataPointIndex : config.dataPointIndex  , seriesIndex : config.seriesIndex  ,selectedDataPoints :  \"selectedDataPoints\" in  config ?config[\"selectedDataPoints\"] : null  } })   \n\n      // if (eventType == \"mousedown\") {\n\n      //   var dataPoint =config.selectedDataPoints\n    \n      //   var dataPointMap = dataPoint.map( (k :any   , i :any )=>    { \n          \n      //     if ( k !== null ) {\n\n      //         // var dataPoindexList = dataPoint[i]\n\n      //         // dataPoindexList\n  \n      //         return {\n      //             columns  : [index[\"columns\"][i]],  \n      //             index :  [index[\"index\"][dataPoint[i]]]\n      //         }\n  \n      //     }\n  \n      //   }  );\n  \n      //   dataPointMap = dataPointMap.filter((k:any) => k!= null )\n  \n      //   Streamlit.setComponentValue(dataPointMap)   \n\n      // } else {\n\n\n      //   var dataSeries =config.seriesIndex \n\n      //   var dataPoint = config.dataPointIndex\n\n      //   Streamlit.setComponentValue([ {columns : [index[\"columns\"][dataSeries] ] ,index : [index[\"index\"][dataPoint] ]}])  \n\n      // }\n\n \n\n  }\n\n\nfunction StreamlitCharts(props:any) {\n\n    const [options, setOptions] = useState( props.chart_dict.options   )\n\n    const count  = useRef( 0  )\n\n\n    useEffect(  () => {\n\n\n      // console.log(\"effect\")\n\n      var newOptions = {...props.chart_dict.options }\n\n      var eventsCopy = {...newOptions.chart.events}\n\n      Object.keys(eventsCopy).forEach((k) => {\n        eventsCopy[k]  = eventsCopy[k] ?  (event :any , chartContext :any , config :any ) =>  {     EventCallback(event , chartContext , config   , k ) }   : null\n       })\n\n\n    var ChangeFormater = newOptions\n\n    // var ChangeFormater = {}\n\n     Object.keys(ChangeFormater).map( (k , i ) => {\n\n        if (k in {xaxis:[] , yaxis : [] }){\n\n            if ( \"labels\" in ChangeFormater[k] ) {\n\n              if ( \"formatter\" in ChangeFormater[k][\"labels\"] ) {\n\n                ChangeFormater[k][\"labels\"][\"formatter\"] = eval(ChangeFormater[k][\"labels\"][\"formatter\"])\n\n                // console.log(\"change to funtion \")\n              }\n            }\n\n          }\n      } )\n\n\n\n      newOptions = {...newOptions , chart : {...props.chart_dict.options.chart  , events :eventsCopy } }\n\n      count.current += 1\n\n      setOptions(newOptions)\n\n      // setCount(count + 1 )\n\n\n      // console.log(options)\n\n    } , [JSON.stringify(props.chart_dict.options) ]\n    )\n\n\n\n    if (count > 0 ) {\n\n\n\n    }\n\n\n\n\n  \n  }\n  \nexport default StreamlitCharts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}