{"ast":null,"code":"var _jsxFileName = \"/home/kobe/Project/streamlit-apexcharts/streamlit_apexcharts/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport StreamlitCharts from \"./ChartStreamlit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass Streamlit_apexcharts extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const chart_dict = this.props.args[\"chart_dict\"];\n      const EventCallback = (event, chartContext, config, index) => {\n        Streamlit.setComponentValue({\n          dataPointIndex: config.dataPointIndex,\n          seriesIndex: config.seriesIndex,\n          selectedDataPoints: \"selectedDataPoints\" in config ? config[\"selectedDataPoints\"] : null\n        });\n      };\n      var eventsCopy = {\n        ...chart_dict.options.chart.events\n      };\n      Object.keys(eventsCopy).forEach(k => {\n        eventsCopy[k] = eventsCopy[k] ? (event, chartContext, config) => {\n          EventCallback(event, chartContext, config, index);\n        } : null;\n      });\n      chart_dict = {\n        ...options,\n        chart: {\n          ...options.chart,\n          events: eventsCopy\n        }\n      };\n      setOptions();\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(StreamlitCharts, {\n          chart_dict: chart_dict,\n          witdth: this.props.width\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(Streamlit_apexcharts);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","StreamlitCharts","jsxDEV","_jsxDEV","Streamlit_apexcharts","constructor","args","state","numClicks","isFocused","render","chart_dict","props","EventCallback","event","chartContext","config","index","setComponentValue","dataPointIndex","seriesIndex","selectedDataPoints","eventsCopy","options","chart","events","Object","keys","forEach","k","setOptions","theme","style","borderStyling","primaryColor","border","outline","children","witdth","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kobe/Project/streamlit-apexcharts/streamlit_apexcharts/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode , Component } from \"react\"\nimport StreamlitCharts from \"./ChartStreamlit\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass Streamlit_apexcharts extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const chart_dict = this.props.args[\"chart_dict\"]\n\n\n\n    const EventCallback = (event :any , chartContext :any , config :any , index : any ) => {\n\n        Streamlit.setComponentValue({dataPointIndex : config.dataPointIndex  , seriesIndex : config.seriesIndex  ,selectedDataPoints :  \"selectedDataPoints\" in  config ?config[\"selectedDataPoints\"] : null  })   \n\n\n    }\n\n\n\n    var eventsCopy = {...chart_dict.options.chart.events}\n\n    Object.keys(eventsCopy).forEach((k) => {\n\n      eventsCopy[k]  = eventsCopy[k] ? (event :any , chartContext :any , config :any) => { EventCallback(event , chartContext , config , index)   } : null\n\n     })\n\n\n     chart_dict = {...options , chart : { ...options.chart , events  : eventsCopy } }\n\n\n\n\n    setOptions(  )  \n\n\n\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        <StreamlitCharts chart_dict = {chart_dict}  witdth = {this.props.width}  ></StreamlitCharts>\n      </span>\n    )\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(Streamlit_apexcharts)\n"],"mappings":";AAAA,SACEA,SAAS,EACTC,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAiC,OAAO;AACpD,OAAOC,eAAe,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQ9C;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,SAASN,sBAAsB,CAAQ;EAAAO,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACxDC,KAAK,GAAG;MAAEC,SAAS,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAM,CAAC;IAAA,KAE1CC,MAAM,GAAG,MAAiB;MAC/B;MACA;MACA,MAAMC,UAAU,GAAG,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC,YAAY,CAAC;MAIhD,MAAMO,aAAa,GAAGA,CAACC,KAAU,EAAGC,YAAiB,EAAGC,MAAW,EAAGC,KAAW,KAAM;QAEnFpB,SAAS,CAACqB,iBAAiB,CAAC;UAACC,cAAc,EAAGH,MAAM,CAACG,cAAc;UAAIC,WAAW,EAAGJ,MAAM,CAACI,WAAW;UAAGC,kBAAkB,EAAI,oBAAoB,IAAKL,MAAM,GAAEA,MAAM,CAAC,oBAAoB,CAAC,GAAG;QAAM,CAAC,CAAC;MAG5M,CAAC;MAID,IAAIM,UAAU,GAAG;QAAC,GAAGX,UAAU,CAACY,OAAO,CAACC,KAAK,CAACC;MAAM,CAAC;MAErDC,MAAM,CAACC,IAAI,CAACL,UAAU,CAAC,CAACM,OAAO,CAAEC,CAAC,IAAK;QAErCP,UAAU,CAACO,CAAC,CAAC,GAAIP,UAAU,CAACO,CAAC,CAAC,GAAG,CAACf,KAAU,EAAGC,YAAiB,EAAGC,MAAW,KAAK;UAAEH,aAAa,CAACC,KAAK,EAAGC,YAAY,EAAGC,MAAM,EAAGC,KAAK,CAAC;QAAG,CAAC,GAAG,IAAI;MAErJ,CAAC,CAAC;MAGFN,UAAU,GAAG;QAAC,GAAGY,OAAO;QAAGC,KAAK,EAAG;UAAE,GAAGD,OAAO,CAACC,KAAK;UAAGC,MAAM,EAAIH;QAAW;MAAE,CAAC;MAKjFQ,UAAU,CAAG,CAAC;;MAKd;MACA;MACA;MACA,MAAM;QAAEC;MAAM,CAAC,GAAG,IAAI,CAACnB,KAAK;MAC5B,MAAMoB,KAA0B,GAAG,CAAC,CAAC;;MAErC;MACA;MACA,IAAID,KAAK,EAAE;QACT;QACA;QACA,MAAME,aAAa,GAAI,aACrB,IAAI,CAAC1B,KAAK,CAACE,SAAS,GAAGsB,KAAK,CAACG,YAAY,GAAG,MAC7C,EAAC;QACFF,KAAK,CAACG,MAAM,GAAGF,aAAa;QAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;MAC/B;;MAEA;MACA;MACA;MACA;MACA,oBACE9B,OAAA;QAAAkC,QAAA,eACElC,OAAA,CAACF,eAAe;UAACU,UAAU,EAAIA,UAAW;UAAE2B,MAAM,EAAI,IAAI,CAAC1B,KAAK,CAAC2B;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAoB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxF,CAAC;IAEX,CAAC;EAAA;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAAC,EAAA,GAAe7C,uBAAuB,CAACK,oBAAoB,CAAC;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}