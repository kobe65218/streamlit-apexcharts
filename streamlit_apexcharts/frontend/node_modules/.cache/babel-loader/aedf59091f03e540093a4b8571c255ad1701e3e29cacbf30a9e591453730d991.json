{"ast":null,"code":"import{StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import StreamlitCharts from\"./ChartStreamlit\";import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */class Streamlit_apexcharts extends StreamlitComponentBase{constructor(){super(...arguments);this.state={numClicks:0,isFocused:false};this.render=()=>{// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nconst chart_dict=this.props.args[\"chart_dict\"];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nconst{theme}=this.props;const style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nconst borderStyling=\"1px solid \".concat(this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// chart_dict.options.theme = this.props.theme \nconsole.log(this.props);// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(StreamlitCharts,{chart_dict:chart_dict,width:this.props.width})});};}}// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(Streamlit_apexcharts);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","StreamlitCharts","jsx","_jsx","Streamlit_apexcharts","constructor","arguments","state","numClicks","isFocused","render","chart_dict","props","args","theme","style","borderStyling","concat","primaryColor","border","outline","console","log","children","width"],"sources":["/home/kobe/Project/streamlit-apexcharts/streamlit_apexcharts/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode , Component } from \"react\"\nimport StreamlitCharts from \"./ChartStreamlit\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass Streamlit_apexcharts extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const chart_dict = this.props.args[\"chart_dict\"]\n    \n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // chart_dict.options.theme = this.props.theme \n\n\n    console.log(this.props)\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        <StreamlitCharts chart_dict = {chart_dict}  width = {this.props.width}    ></StreamlitCharts>\n      </span>\n    )\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(Streamlit_apexcharts)\n"],"mappings":"AAAA,OAEEA,sBAAsB,CACtBC,uBAAuB,KAClB,yBAAyB,CAChC,MAAO,CAAAC,KAAK,KAAiC,OAAO,CACpD,MAAO,CAAAC,eAAe,KAAM,kBAAkB,QAAAC,GAAA,IAAAC,IAAA,yBAQ9C;AACA;AACA;AACA,GACA,KAAM,CAAAC,oBAAoB,QAAS,CAAAN,sBAA8B,CAAAO,YAAA,WAAAC,SAAA,OACxDC,KAAK,CAAG,CAAEC,SAAS,CAAE,CAAC,CAAEC,SAAS,CAAE,KAAM,CAAC,MAE1CC,MAAM,CAAG,IAAiB,CAC/B;AACA;AACA,KAAM,CAAAC,UAAU,CAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,YAAY,CAAC,CAGhD;AACA;AACA;AACA,KAAM,CAAEC,KAAM,CAAC,CAAG,IAAI,CAACF,KAAK,CAC5B,KAAM,CAAAG,KAA0B,CAAG,CAAC,CAAC,CAErC;AACA;AACA,GAAID,KAAK,CAAE,CACT;AACA;AACA,KAAM,CAAAE,aAAa,cAAAC,MAAA,CACjB,IAAI,CAACV,KAAK,CAACE,SAAS,CAAGK,KAAK,CAACI,YAAY,CAAG,MAAM,CAClD,CACFH,KAAK,CAACI,MAAM,CAAGH,aAAa,CAC5BD,KAAK,CAACK,OAAO,CAAGJ,aAAa,CAC/B,CAEA;AAGAK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,KAAK,CAAC,CAEvB;AACA;AACA;AACA;AACA,mBACET,IAAA,SAAAoB,QAAA,cACEpB,IAAA,CAACF,eAAe,EAACU,UAAU,CAAIA,UAAW,CAAEa,KAAK,CAAI,IAAI,CAACZ,KAAK,CAACY,KAAM,CAAsB,CAAC,CACzF,CAAC,CAEX,CAAC,EAEH,CAEA;AACA;AACA;AACA;AACA;AACA,cAAe,CAAAzB,uBAAuB,CAACK,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}