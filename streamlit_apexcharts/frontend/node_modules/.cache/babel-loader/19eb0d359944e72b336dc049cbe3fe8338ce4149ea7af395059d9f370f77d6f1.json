{"ast":null,"code":"var _jsxFileName = \"/home/kobe/Project/streamlit-apexcharts/streamlit_apexcharts/frontend/src/ChartStreamlit.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { Streamlit } from \"streamlit-component-lib\";\n\n// var t =  {\n\n//       dataPointMouseEnter : {type : 'mouseenter'  , return : [ 'seriesIndex'  ,  'dataPointIndex' ]  } ,  \n\n//       dataPointSelection : {type :  'mousedown' , return : ['seriesIndex' , 'dataPointIndex' ,  'selectedDataPoints']  }\n\n//  }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventCallback(event, chartContext, config, eventType) {\n  // console.log(event)\n\n  // // console.log(chartContext)\n  // console.log(config)\n\n  // var eventType = event.type \n\n  Streamlit.setComponentValue({\n    [eventType]: {\n      dataPointIndex: config.dataPointIndex,\n      seriesIndex: config.seriesIndex,\n      selectedDataPoints: \"selectedDataPoints\" in config ? config[\"selectedDataPoints\"] : null\n    }\n  });\n\n  // if (eventType == \"mousedown\") {\n\n  //   var dataPoint =config.selectedDataPoints\n\n  //   var dataPointMap = dataPoint.map( (k :any   , i :any )=>    { \n\n  //     if ( k !== null ) {\n\n  //         // var dataPoindexList = dataPoint[i]\n\n  //         // dataPoindexList\n\n  //         return {\n  //             columns  : [index[\"columns\"][i]],  \n  //             index :  [index[\"index\"][dataPoint[i]]]\n  //         }\n\n  //     }\n\n  //   }  );\n\n  //   dataPointMap = dataPointMap.filter((k:any) => k!= null )\n\n  //   Streamlit.setComponentValue(dataPointMap)   \n\n  // } else {\n\n  //   var dataSeries =config.seriesIndex \n\n  //   var dataPoint = config.dataPointIndex\n\n  //   Streamlit.setComponentValue([ {columns : [index[\"columns\"][dataSeries] ] ,index : [index[\"index\"][dataPoint] ]}])  \n\n  // }\n}\n_c = EventCallback;\nfunction StreamlitCharts(props) {\n  _s();\n  const [options, setOptions] = useState(props.chart_dict.options);\n  // const [series, setSeries] = useState( props.chart_dict.series )\n  // const [index, setIndex] = useState( props.chart_dict.index )\n\n  // const app =  useRef<HTMLInputElement>(null)\n\n  // var options = props.chart_dict.options\n\n  useEffect(() => {\n\n    // var eventsCopy = {...options.chart.events}\n\n    // Object.keys(eventsCopy).forEach((k) => {\n    //   eventsCopy[k]  = eventsCopy[k] ? (event :any , chartContext :any , config :any) => { EventCallback(event , chartContext , config   , k )   } : null\n    //  })\n\n    //  var FroamterCheck = options\n\n    //  Object.keys(FroamterCheck).map( (k , i ) => {\n\n    //     if (k in {xaxis:[] , yaxis : [] }){\n\n    //         if ( \"labels\" in FroamterCheck[k] ) {\n\n    //           if ( \"formatter\" in FroamterCheck[k][\"labels\"] ) {\n\n    //             FroamterCheck[k][\"labels\"][\"formatter\"] = eval(FroamterCheck[k][\"labels\"][\"formatter\"])\n    //           }\n    //         }\n\n    //       }\n    //   } )\n\n    // //  options  =   {...options , chart : { ...options.chart , events  : eventsCopy } }\n\n    // setOptions({...options , chart : { ...options.chart , events  : eventsCopy }})\n  }, [props.chart_dict.options]);\n\n  // useEffect(() => {\n\n  //     var eventsCopy = {...options.chart.events}\n\n  //     Object.keys(eventsCopy).forEach((k) => {\n\n  //       eventsCopy[k]  = eventsCopy[k] ? (event :any , chartContext :any , config :any) => { EventCallback(event , chartContext , config , index)   } : null\n\n  //      })\n\n  //     setOptions( {...options , chart : { ...options.chart , events  : eventsCopy } } )  \n\n  // },[options.chart.events])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mixed-chart\",\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          options: options,\n          series: props.chart_dict.series,\n          type: options.chart.type,\n          width: props.width,\n          height: options.chart.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n_s(StreamlitCharts, \"B1b/HpgtAYtPpyKMNo+cVSyOVKE=\");\n_c2 = StreamlitCharts;\nexport default StreamlitCharts;\nvar _c, _c2;\n$RefreshReg$(_c, \"EventCallback\");\n$RefreshReg$(_c2, \"StreamlitCharts\");","map":{"version":3,"names":["React","useState","useEffect","Chart","Streamlit","jsxDEV","_jsxDEV","EventCallback","event","chartContext","config","eventType","setComponentValue","dataPointIndex","seriesIndex","selectedDataPoints","_c","StreamlitCharts","props","_s","options","setOptions","chart_dict","className","children","series","type","chart","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/kobe/Project/streamlit-apexcharts/streamlit_apexcharts/frontend/src/ChartStreamlit.tsx"],"sourcesContent":["\nimport React, { Component ,useState , useEffect , useRef } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport {\n    Streamlit,\n  } from \"streamlit-component-lib\"\n\n// var t =  {\n\n//       dataPointMouseEnter : {type : 'mouseenter'  , return : [ 'seriesIndex'  ,  'dataPointIndex' ]  } ,  \n\n\n//       dataPointSelection : {type :  'mousedown' , return : ['seriesIndex' , 'dataPointIndex' ,  'selectedDataPoints']  }\n\n\n//  }\n\n\n\n  function EventCallback (event :any , chartContext :any , config :any , eventType :any  ) {\n\n    // console.log(event)\n\n    // // console.log(chartContext)\n    // console.log(config)\n\n      // var eventType = event.type \n\n      Streamlit.setComponentValue( { [eventType] :  {dataPointIndex : config.dataPointIndex  , seriesIndex : config.seriesIndex  ,selectedDataPoints :  \"selectedDataPoints\" in  config ?config[\"selectedDataPoints\"] : null  } })   \n\n      // if (eventType == \"mousedown\") {\n\n      //   var dataPoint =config.selectedDataPoints\n    \n      //   var dataPointMap = dataPoint.map( (k :any   , i :any )=>    { \n          \n      //     if ( k !== null ) {\n\n      //         // var dataPoindexList = dataPoint[i]\n\n      //         // dataPoindexList\n  \n      //         return {\n      //             columns  : [index[\"columns\"][i]],  \n      //             index :  [index[\"index\"][dataPoint[i]]]\n      //         }\n  \n      //     }\n  \n      //   }  );\n  \n      //   dataPointMap = dataPointMap.filter((k:any) => k!= null )\n  \n      //   Streamlit.setComponentValue(dataPointMap)   \n\n      // } else {\n\n\n      //   var dataSeries =config.seriesIndex \n\n      //   var dataPoint = config.dataPointIndex\n\n      //   Streamlit.setComponentValue([ {columns : [index[\"columns\"][dataSeries] ] ,index : [index[\"index\"][dataPoint] ]}])  \n\n      // }\n\n \n\n  }\n\n\n  \n\nfunction StreamlitCharts(props:any) {\n\n    const [options, setOptions] = useState( props.chart_dict.options   )\n    // const [series, setSeries] = useState( props.chart_dict.series )\n    // const [index, setIndex] = useState( props.chart_dict.index )\n\n    // const app =  useRef<HTMLInputElement>(null)\n\n    // var options = props.chart_dict.options\n\n\n\n    useEffect(  () => {\n\n      // var eventsCopy = {...options.chart.events}\n\n\n      // Object.keys(eventsCopy).forEach((k) => {\n      //   eventsCopy[k]  = eventsCopy[k] ? (event :any , chartContext :any , config :any) => { EventCallback(event , chartContext , config   , k )   } : null\n      //  })\n\n\n      //  var FroamterCheck = options\n\n      //  Object.keys(FroamterCheck).map( (k , i ) => {\n\n      //     if (k in {xaxis:[] , yaxis : [] }){\n\n      //         if ( \"labels\" in FroamterCheck[k] ) {\n\n      //           if ( \"formatter\" in FroamterCheck[k][\"labels\"] ) {\n\n      //             FroamterCheck[k][\"labels\"][\"formatter\"] = eval(FroamterCheck[k][\"labels\"][\"formatter\"])\n      //           }\n      //         }\n\n      //       }\n      //   } )\n\n      // //  options  =   {...options , chart : { ...options.chart , events  : eventsCopy } }\n\n\n      // setOptions({...options , chart : { ...options.chart , events  : eventsCopy }})\n\n\n    } , [props.chart_dict.options]\n    )\n\n    \n\n\n\n    // useEffect(() => {\n\n    //     var eventsCopy = {...options.chart.events}\n\n    //     Object.keys(eventsCopy).forEach((k) => {\n\n    //       eventsCopy[k]  = eventsCopy[k] ? (event :any , chartContext :any , config :any) => { EventCallback(event , chartContext , config , index)   } : null\n\n    //      })\n\n    //     setOptions( {...options , chart : { ...options.chart , events  : eventsCopy } } )  \n  \n    // },[options.chart.events])\n\n\n\n\n\n    return (\n        <div className=\"app\" >\n        <div className=\"row\">\n          <div className=\"mixed-chart\">\n\n            <Chart\n              options={options}\n              series={props.chart_dict.series} \n              type= {options.chart.type}\n              width= {props.width}\n              height= {options.chart.height}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \nexport default StreamlitCharts;"],"mappings":";;AACA,OAAOA,KAAK,IAAeC,QAAQ,EAAGC,SAAS,QAAiB,OAAO;AACvE,OAAOC,KAAK,MAAM,kBAAkB;AACpC,SACIC,SAAS,QACJ,yBAAyB;;AAElC;;AAEA;;AAGA;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIE,SAASC,aAAaA,CAAEC,KAAU,EAAGC,YAAiB,EAAGC,MAAW,EAAGC,SAAc,EAAI;EAEvF;;EAEA;EACA;;EAEE;;EAEAP,SAAS,CAACQ,iBAAiB,CAAE;IAAE,CAACD,SAAS,GAAK;MAACE,cAAc,EAAGH,MAAM,CAACG,cAAc;MAAIC,WAAW,EAAGJ,MAAM,CAACI,WAAW;MAAGC,kBAAkB,EAAI,oBAAoB,IAAKL,MAAM,GAAEA,MAAM,CAAC,oBAAoB,CAAC,GAAG;IAAM;EAAE,CAAC,CAAC;;EAE5N;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAGA;;EAEA;;EAEA;;EAEA;AAIJ;AAACM,EAAA,GAjDQT,aAAa;AAsDxB,SAASU,eAAeA,CAACC,KAAS,EAAE;EAAAC,EAAA;EAEhC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAEiB,KAAK,CAACI,UAAU,CAACF,OAAU,CAAC;EACpE;EACA;;EAEA;;EAEA;;EAIAlB,SAAS,CAAG,MAAM;;IAEhB;;IAGA;IACA;IACA;;IAGA;;IAEA;;IAEA;;IAEA;;IAEA;;IAEA;IACA;IACA;;IAEA;IACA;;IAEA;;IAGA;EAAA,CAGD,EAAG,CAACgB,KAAK,CAACI,UAAU,CAACF,OAAO,CAC7B,CAAC;;EAMD;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAMA,oBACId,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,eACpBlB,OAAA;MAAKiB,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClBlB,OAAA;QAAKiB,SAAS,EAAC,aAAa;QAAAC,QAAA,eAE1BlB,OAAA,CAACH,KAAK;UACJiB,OAAO,EAAEA,OAAQ;UACjBK,MAAM,EAAEP,KAAK,CAACI,UAAU,CAACG,MAAO;UAChCC,IAAI,EAAGN,OAAO,CAACO,KAAK,CAACD,IAAK;UAC1BE,KAAK,EAAGV,KAAK,CAACU,KAAM;UACpBC,MAAM,EAAGT,OAAO,CAACO,KAAK,CAACE;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACd,EAAA,CAtFMF,eAAe;AAAAiB,GAAA,GAAfjB,eAAe;AAwFxB,eAAeA,eAAe;AAAC,IAAAD,EAAA,EAAAkB,GAAA;AAAAC,YAAA,CAAAnB,EAAA;AAAAmB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}